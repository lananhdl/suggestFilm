// File: mongo.js
const mongoose = require('mongoose');

// S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ l∆∞u tr·ªØ URL k·∫øt n·ªëi
const dbURL = process.env.MONGO_URI || 'mongodb+srv://nguyenthilananhit:Nguyenthilananh!2345@cluster0.9gdnlpv.mongodb.net/suggestfilm';

// ‚úÖ Xo√° cache model c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
mongoose.models = {};
mongoose.modelSchemas = {};

// T·∫°o schema cho reviews
const reviewSchema = new mongoose.Schema({
  review_id: { type: Number, required: true, unique: true },
  movie_id: { type: Number, required: true },
  user_id: { type: Number, required: true },
  review_text: { type: String, required: true },
  rating: { type: Number, min: 1, max: 5, required: true },
  created_at: { type: Date, default: Date.now }
});

// T·∫°o model (ƒë·∫£m b·∫£o t√™n collection l√† 'reviews')
const Review = mongoose.model('Review', reviewSchema);

// H√†m k·∫øt n·ªëi v√† tr·∫£ v·ªÅ model Review
async function connectMongo() {
  try {
    await mongoose.connect(dbURL, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng!');

    // üîÑ Xo√° collection c≈© n·∫øu t·ªìn t·∫°i (ch·ªâ khi dev/test)
    try {
      await mongoose.connection.db.dropCollection('reviews');
      console.log('üßπ ƒê√£ xo√° collection reviews c≈©');
    } catch (err) {
      if (err.code === 26) {
        console.log('‚úÖ Collection reviews ch∆∞a t·ªìn t·∫°i, kh√¥ng c·∫ßn xo√°');
      } else {
        throw err;
      }
    }

    return Review;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error);
    throw error;
  }
}

module.exports = connectMongo;
